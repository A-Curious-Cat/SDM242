
import sys
from aubio import onset, source
from numpy import hstack, zeros
import RPi.GPIO as GPIO
import time


GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)
ledPin = 12
GPIO.setup(ledPin, GPIO.OUT)


win_s = 512 # fft size
hop_s = win_s // 2 # hop size
	
if len(sys.argv) < 2:
    print("Usage: %s <filename> [samplerate]" % sys.argv[0])
    sys.exit(1)

filename = sys.argv[1]

samplerate = 0
if len( sys.argv ) > 2: 
    samplerate = int(sys.argv[2])

s = source(filename, samplerate, hop_s)
samplerate = s.samplerate
o = onset("default", win_s, hop_s, samplerate)

# list of onsets, in samples
onsets = []
# storage for plotted data
desc = []
tdesc = []
allsamples_max = zeros(0,)
downsample = 2 # to plot n samples / hop_s

# total number of frames read
total_frames = 0
while True:
    samples, read = s()
    if o(samples):

        onsets.append(o.get_last())
    # keep some data to plot it later
    new_maxes = (abs(samples.reshape(hop_s//downsample, downsample))).max(axis=0)
    allsamples_max = hstack([allsamples_max, new_maxes])
    desc.append(o.get_descriptor())
    tdesc.append(o.get_thresholded_descriptor())
    total_frames += read
    if read < hop_s: break

for index in range(len(onsets)-1):
        onsets[index] /= float(samplerate)
        sleeptime=onsets[index+1]/float(samplerate)-onsets[index]
        print("%f" % (onsets[index+1]/float(samplerate)-onsets[index]))
        GPIO.output(ledPin,GPIO.HIGH)
        time.sleep(sleeptime)
        print ("LED turning off.")
        GPIO.output(ledPin,GPIO.LOW)


